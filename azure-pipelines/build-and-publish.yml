trigger:
  tags:
    include:
    - '*'
# This pipeline is meant to build & deploy upon tagging. It's not meant to be a part of PR validation.
pr: none

name: $(Build.SourceBranchName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)

variables:
- group: Code_Signing_Certificate_2023_2026
- name: prId
  value: $[coalesce(variables['System.PullRequest.PullRequestId'], '000')]
- name: prIteration
  value: $[counter(variables['prId'], 1)]
- name: buildConfiguration
  value: Release

stages:
- stage: BuildAndPublish
  condition: succeeded()
  jobs: 
  - job: BuildAndSign
    pool:
      vmImage: 'windows-latest'

    steps:
    - checkout: self
      fetchDepth: 0

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.x'

    - task: GitVersion@5
      inputs:
        versionSpec: '5.x'
      name: gitVersion

    - task: DownloadSecureFile@1
      name: cert
      inputs:
        secureFile: 'code-signing-certificate-2023-2026.pfx'

    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'
        projects: 'Infragistics.QueryBuilder.Executor.csproj'
        arguments: '-c $(buildConfiguration) /p:Version=$(GitVersion.NuGetVersionV2)'
        workingDirectory: '$(Build.SourcesDirectory)'

    - powershell: |
        $outputDir = "$(Build.SourcesDirectory)\bin\$(buildConfiguration)\net9.0"
        Write-Host "Listing contents of: $outputDir"
        if (-Not (Test-Path $outputDir)) {
          Write-Error "Output folder not found: $outputDir"
          exit 1
        }
        Get-ChildItem $outputDir -Recurse | ForEach-Object {
          Write-Host $_.FullName
        }
      displayName: 'Debug: List build output contents'

    - powershell: |
        $dllFolder = "$(Build.SourcesDirectory)\bin\$(buildConfiguration)\net9.0"
        Write-Host "Signing DLLs in folder: $dllFolder"

        $signtoolPath = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe"
        Write-Host "Using signtool at: $signtoolPath"

        $dllFiles = Get-ChildItem -Path $dllFolder -Filter *.dll -Recurse
        foreach ($dll in $dllFiles) {
          Write-Host "Signing $($dll.FullName)..."
          & $signtoolPath sign /f $(cert.secureFilePath) /p $env:CERT_PASS /tr $(SigningCertificateTimestampUrl) /td sha256 /fd sha256 $dll.FullName

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Signing failed for $($dll.FullName)"
            exit 1
          }
        }
      displayName: 'Sign all DLL files with PFX certificate'
      env:
        CERT_PASS: $(SigningCertificatePassword)

    - powershell: |
        $packageOutputDir = "$(Build.ArtifactStagingDirectory)\nuget"
        $packageVersion = "$(GitVersion.NuGetVersionV2)"

        Write-Host "Packing project from existing build output..."
        dotnet pack ./Infragistics.QueryBuilder.Executor.csproj `
          --no-build `
          --configuration $(buildConfiguration) `
          -p:PackageVersion=$packageVersion `
          -o $packageOutputDir

        if ($LASTEXITCODE -ne 0) {
          Write-Error "dotnet pack failed"
          exit 1
        } 
      displayName: 'Pack NuGet Package using PowerShell'

    - task: PowerShell@2 
      displayName: 'Sign NuGet package'
      env:
        CERT_PASS: $(SigningCertificatePassword)
      inputs:
        targetType: 'inline'
        script: |
          nuget.exe sign $(Build.ArtifactStagingDirectory)\nuget\*.nupkg -CertificatePath $(cert.secureFilePath) -CertificatePassword $env:CERT_PASS -Timestamper $(SigningCertificateTimestampUrl)

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
        ArtifactName: 'NuGetPackage'
        publishLocation: 'Container'
      displayName: 'Publish NuGet Package as Build Artifact'

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/nuget/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'NuGet.Org'
      displayName: 'Publish to NuGet.org'
